"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[39310],{15680:(e,n,t)=>{t.d(n,{xA:()=>s,yg:()=>m});var a=t(96540);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var p=a.createContext({}),d=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=d(e.components);return a.createElement(p.Provider,{value:n},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),g=d(t),c=l,m=g["".concat(p,".").concat(c)]||g[c]||u[c]||r;return t?a.createElement(m,i(i({ref:n},s),{},{components:t})):a.createElement(m,i({ref:n},s))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,i=new Array(r);i[0]=c;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[g]="string"==typeof e?e:l,i[1]=o;for(var d=2;d<r;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},9514:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=t(58168),l=(t(96540),t(15680));const r={},i="Event Listener",o={unversionedId:"concept/event-listener",id:"concept/event-listener",title:"Event Listener",description:"Introduction",source:"@site/docs/concept/event-listener.md",sourceDirName:"concept",slug:"/concept/event-listener",permalink:"/docs/concept/event-listener",draft:!1,editUrl:"https://github.com/apache/seatunnel-website/edit/main/docs/concept/event-listener.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Speed Control",permalink:"/docs/concept/speed-limit"},next:{title:"Schema evolution",permalink:"/docs/concept/schema-evolution"}},p={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Support Those Engines",id:"support-those-engines",level:2},{value:"API",id:"api",level:2},{value:"Event Data API",id:"event-data-api",level:3},{value:"EventType Enumeration Description",id:"eventtype-enumeration-description",level:4},{value:"Event Listener API",id:"event-listener-api",level:3},{value:"Event Collect API",id:"event-collect-api",level:3},{value:"Configuration Listener",id:"configuration-listener",level:2},{value:"Zeta Engine",id:"zeta-engine",level:3},{value:"Flink Engine",id:"flink-engine",level:3},{value:"Spark Engine",id:"spark-engine",level:3},{value:"Steps to Implement a Custom Event Handler",id:"steps-to-implement-a-custom-event-handler",level:2},{value:"1. Add Dependencies",id:"1-add-dependencies",level:3},{value:"2. Implement the Event Handler",id:"2-implement-the-event-handler",level:3},{value:"3. Configure SPI Loading",id:"3-configure-spi-loading",level:3},{value:"4. Deployment and Verification",id:"4-deployment-and-verification",level:3},{value:"Notes",id:"notes",level:3}],s={toc:d},g="wrapper";function u(e){let{components:n,...t}=e;return(0,l.yg)(g,(0,a.A)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,l.yg)("h1",{id:"event-listener"},"Event Listener"),(0,l.yg)("h2",{id:"introduction"},"Introduction"),(0,l.yg)("p",null,"The SeaTunnel provides a rich event listening feature that allows you to manage the status at which data is synchronized.\nThis functionality is crucial when you need to listen job running status(",(0,l.yg)("inlineCode",{parentName:"p"},"org.apache.seatunnel.api.event"),").\nThis document will guide you through the usage of these parameters and how to leverage them effectively."),(0,l.yg)("h2",{id:"support-those-engines"},"Support Those Engines"),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"SeaTunnel Zeta",(0,l.yg)("br",null),"\nFlink",(0,l.yg)("br",null),"\nSpark",(0,l.yg)("br",null))),(0,l.yg)("h2",{id:"api"},"API"),(0,l.yg)("p",null,"The event API is defined in the ",(0,l.yg)("inlineCode",{parentName:"p"},"org.apache.seatunnel.api.event")," package."),(0,l.yg)("h3",{id:"event-data-api"},"Event Data API"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"org.apache.seatunnel.api.event.Event")," - The interface for event data."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"org.apache.seatunnel.api.event.EventType")," - The enum for event type.")),(0,l.yg)("h4",{id:"eventtype-enumeration-description"},"EventType Enumeration Description"),(0,l.yg)("p",null,"The ",(0,l.yg)("inlineCode",{parentName:"p"},"EventType")," enumeration defines all possible event types in the system, mainly including:"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"Event Type"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"),(0,l.yg)("th",{parentName:"tr",align:null},"Associated Event Class"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"JOB_STATUS")),(0,l.yg)("td",{parentName:"tr",align:null},"Job status change event"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"JobStateEvent"))),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"SCHEMA_CHANGE_UPDATE_COLUMNS")),(0,l.yg)("td",{parentName:"tr",align:null},"Table structure update event"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"AlterTableColumnsEvent"))),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"SCHEMA_CHANGE_ADD_COLUMN")),(0,l.yg)("td",{parentName:"tr",align:null},"Table column addition event"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"AlterTableAddColumnEvent"))),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"SCHEMA_CHANGE_DROP_COLUMN")),(0,l.yg)("td",{parentName:"tr",align:null},"Table column deletion event"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"AlterTableDropColumnEvent"))),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"SCHEMA_CHANGE_MODIFY_COLUMN")),(0,l.yg)("td",{parentName:"tr",align:null},"Table column modification event"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"AlterTableModifyColumnEvent"))),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"READER_OPEN")),(0,l.yg)("td",{parentName:"tr",align:null},"Reader open event"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"ReaderOpenEvent"))),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"READER_CLOSE")),(0,l.yg)("td",{parentName:"tr",align:null},"Reader close event"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"ReaderCloseEvent"))),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"WRITER_OPEN")),(0,l.yg)("td",{parentName:"tr",align:null},"Writer open event"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"WriterOpenEvent"))),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"WRITER_CLOSE")),(0,l.yg)("td",{parentName:"tr",align:null},"Writer close event"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"WriterCloseEvent"))))),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"Note: Different event types correspond to different event data structures. When customizing an event handler, you need to judge the type through ",(0,l.yg)("inlineCode",{parentName:"p"},"event.getEventType()")," to ensure type-safe conversion.")),(0,l.yg)("h3",{id:"event-listener-api"},"Event Listener API"),(0,l.yg)("p",null,"You can customize event handler, such as sending events to external systems."),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"org.apache.seatunnel.api.event.EventHandler")," - The interface for event handler, SPI will automatically load subclass from the classpath.")),(0,l.yg)("h3",{id:"event-collect-api"},"Event Collect API"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"org.apache.seatunnel.api.source.SourceSplitEnumerator")," - Attached event listener API to report events from ",(0,l.yg)("inlineCode",{parentName:"li"},"SourceSplitEnumerator"),".")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-java"},"package org.apache.seatunnel.api.source;\n\npublic interface SourceSplitEnumerator {\n\n    interface Context {\n\n        /**\n         * Get the {@link org.apache.seatunnel.api.event.EventListener} of this enumerator.\n         *\n         * @return\n         */\n        EventListener getEventListener();\n    }\n}\n")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"org.apache.seatunnel.api.source.SourceReader")," - Attached event listener API to report events from ",(0,l.yg)("inlineCode",{parentName:"li"},"SourceReader"),".")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-java"},"package org.apache.seatunnel.api.source;\n\npublic interface SourceReader {\n\n    interface Context {\n\n        /**\n         * Get the {@link org.apache.seatunnel.api.event.EventListener} of this reader.\n         *\n         * @return\n         */\n        EventListener getEventListener();\n    }\n}\n")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"org.apache.seatunnel.api.sink.SinkWriter")," - Attached event listener API to report events from ",(0,l.yg)("inlineCode",{parentName:"li"},"SinkWriter"),".")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-java"},"package org.apache.seatunnel.api.sink;\n\npublic interface SinkWriter {\n\n    interface Context {\n\n        /**\n         * Get the {@link org.apache.seatunnel.api.event.EventListener} of this writer.\n         *\n         * @return\n         */\n        EventListener getEventListener();\n    }\n}\n")),(0,l.yg)("h2",{id:"configuration-listener"},"Configuration Listener"),(0,l.yg)("p",null,"To use the event listening feature, you need to configure engine config."),(0,l.yg)("h3",{id:"zeta-engine"},"Zeta Engine"),(0,l.yg)("p",null,"Example config in your config file(seatunnel.yaml):"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},'seatunnel:\n  engine:\n    event-report-http:\n      url: "http://example.com:1024/event/report"\n      headers:\n        Content-Type: application/json\n')),(0,l.yg)("h3",{id:"flink-engine"},"Flink Engine"),(0,l.yg)("p",null,"You can define the implementation class of ",(0,l.yg)("inlineCode",{parentName:"p"},"org.apache.seatunnel.api.event.EventHandler")," interface and add to the classpath to automatically load it through SPI."),(0,l.yg)("p",null,"Support flink version: 1.14.0+"),(0,l.yg)("p",null,"Example: ",(0,l.yg)("inlineCode",{parentName:"p"},"org.apache.seatunnel.api.event.LoggingEventHandler")),(0,l.yg)("h3",{id:"spark-engine"},"Spark Engine"),(0,l.yg)("p",null,"You can define the implementation class of ",(0,l.yg)("inlineCode",{parentName:"p"},"org.apache.seatunnel.api.event.EventHandler")," interface and add to the classpath to automatically load it through SPI."),(0,l.yg)("h2",{id:"steps-to-implement-a-custom-event-handler"},"Steps to Implement a Custom Event Handler"),(0,l.yg)("p",null,"The following takes ",(0,l.yg)("inlineCode",{parentName:"p"},"JobStateEvent")," as an example to illustrate how to implement a custom event handler. You can extend this method to handle other types of events as needed."),(0,l.yg)("h3",{id:"1-add-dependencies"},"1. Add Dependencies"),(0,l.yg)("p",null,"Introduce the necessary dependencies in the project's ",(0,l.yg)("inlineCode",{parentName:"p"},"pom.xml"),":"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n    <groupId>org.apache.seatunnel</groupId>\n    <artifactId>seatunnel-api</artifactId>\n    <version>${seatunnel.version}</version>\n    <scope>provided</scope>\n</dependency>\n<dependency>\n    <groupId>org.apache.seatunnel</groupId>\n    <artifactId>seatunnel-engine-common</artifactId>\n    <version>${seatunnel.version}</version>\n    <scope>provided</scope>\n</dependency>\n")),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"Note: Replace ",(0,l.yg)("inlineCode",{parentName:"p"},"${seatunnel.version}")," with the actual SeaTunnel version used.")),(0,l.yg)("h3",{id:"2-implement-the-event-handler"},"2. Implement the Event Handler"),(0,l.yg)("p",null,"Create a custom class that implements the ",(0,l.yg)("inlineCode",{parentName:"p"},"org.apache.seatunnel.api.event.EventHandler")," interface, override the ",(0,l.yg)("inlineCode",{parentName:"p"},"handle")," method, and implement business logic for the event types to be processed."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Core Logic"),": Filter event types through ",(0,l.yg)("inlineCode",{parentName:"p"},"event.getEventType()")," \u2014 since the SeaTunnel engine distributes various types of events, you need to explicitly judge the event type to ensure only target events are processed."),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-java"},'import lombok.extern.slf4j.Slf4j;\nimport org.apache.seatunnel.api.event.Event;\nimport org.apache.seatunnel.api.event.EventHandler;\nimport org.apache.seatunnel.api.event.EventType;\nimport org.apache.seatunnel.engine.common.job.JobStatus;\nimport org.apache.seatunnel.engine.common.job.JobStateEvent;\nimport org.apache.seatunnel.api.event.schema.AlterTableAddColumnEvent;\nimport org.apache.seatunnel.api.event.source.ReaderOpenEvent;\nimport org.apache.seatunnel.api.event.sink.WriterCloseEvent;\n\n/**\n * Example of a custom multi-type event handler, including processing logic for multiple events\n */\n@Slf4j\npublic class CustomMultiEventHandler implements EventHandler {\n\n    @Override\n    public void handle(Event event) {\n        // Process differently based on event type\n        EventType eventType = event.getEventType();\n        \n        switch (eventType) {\n            case JOB_STATUS:\n                handleJobStateEvent((JobStateEvent) event);\n                break;\n            case SCHEMA_CHANGE_ADD_COLUMN:\n                handleAddColumnEvent((AlterTableAddColumnEvent) event);\n                break;\n            case READER_OPEN:\n                handleReaderOpenEvent((ReaderOpenEvent) event);\n                break;\n            case WRITER_CLOSE:\n                handleWriterCloseEvent((WriterCloseEvent) event);\n                break;\n            // Add processing for other event types as needed\n            default:\n                // Ignore unprocessed event types\n                log.debug("Ignoring unprocessed event type: {}", eventType);\n        }\n    }\n\n    /**\n     * Handle job state events\n     */\n    private void handleJobStateEvent(JobStateEvent jobEvent) {\n        String jobId = jobEvent.getJobId();\n        String jobName = jobEvent.getJobName();\n        JobStatus status = jobEvent.getJobStatus();\n        long eventTime = jobEvent.getCreatedTime();\n\n        switch (status) {\n            case FAILED:\n                log.error("Job failed | jobId: {}, jobName: {}, Time: {}", \n                    jobId, jobName, eventTime);\n                // Add failure alert logic\n                sendAlert("Job Failure", "jobId: " + jobId);\n                break;\n            case FINISHED:\n                log.info("Job completed | jobId: {}, jobName: {}, Time: {}", \n                    jobId, jobName, eventTime);\n                break;\n            // Handle other statuses...\n            default:\n                log.info("Job status changed | jobId: {}, Status: {}, Time: {}", \n                    jobId, status, eventTime);\n        }\n    }\n\n    /**\n     * Handle table column addition events\n     */\n    private void handleAddColumnEvent(AlterTableAddColumnEvent event) {\n        log.info("Column added to table | Table Name: {}, Added Columns: {}, Time: {}",\n            event.getTableName(), event.getAddedColumns(), event.getEventTime());\n        // Handle table structure change logic\n    }\n\n    /**\n     * Handle reader open events\n     */\n    private void handleReaderOpenEvent(ReaderOpenEvent event) {\n        log.info("Reader opened | Plugin ID: {}, Parallelism: {}, Time: {}",\n            event.getPluginId(), event.getParallelism(), event.getEventTime());\n        // Handle reader initialization logic\n    }\n\n    /**\n     * Handle writer close events\n     */\n    private void handleWriterCloseEvent(WriterCloseEvent event) {\n        log.info("Writer closed | Plugin ID: {}, Processed Record Count: {}, Time: {}",\n            event.getPluginId(), event.getRecordCount(), event.getEventTime());\n        // Handle writer resource cleanup logic\n    }\n\n    /**\n     * Send alert notifications\n     */\n    private void sendAlert(String title, String content) {\n        // Implement alert logic (e.g., calling HTTP APIs, sending emails, etc.)\n        log.info("[Alert] {}: {}", title, content);\n    }\n}\n')),(0,l.yg)("h3",{id:"3-configure-spi-loading"},"3. Configure SPI Loading"),(0,l.yg)("p",null,"To enable the engine to automatically discover and load the custom handler, add an SPI configuration file in the project's resource directory:"),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},"Create the directory: ",(0,l.yg)("inlineCode",{parentName:"li"},"src/main/resources/META-INF/services/")),(0,l.yg)("li",{parentName:"ol"},"Create a new file: ",(0,l.yg)("inlineCode",{parentName:"li"},"org.apache.seatunnel.api.event.EventHandler")),(0,l.yg)("li",{parentName:"ol"},"Add the fully qualified class name of the custom handler to the file:",(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre"},"com.example.CustomMultiEventHandler\n")))),(0,l.yg)("h3",{id:"4-deployment-and-verification"},"4. Deployment and Verification"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Place the JAR package containing the custom handler into the SeaTunnel engine's classpath (e.g., the ",(0,l.yg)("inlineCode",{parentName:"li"},"lib/")," directory)"),(0,l.yg)("li",{parentName:"ul"},"After starting the task, when the corresponding event occurs, the handler will be triggered automatically and execute the corresponding processing logic"),(0,l.yg)("li",{parentName:"ul"},"Verify whether the handler works properly through log output")),(0,l.yg)("h3",{id:"notes"},"Notes"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"The handler logic should be as lightweight as possible to avoid blocking the event processing thread"),(0,l.yg)("li",{parentName:"ul"},"If network calls are required (e.g., sending alerts), it is recommended to implement them in an asynchronous manner to prevent timeouts from affecting the task itself"),(0,l.yg)("li",{parentName:"ul"},"Different engines may have different levels of support for events; for example, ",(0,l.yg)("inlineCode",{parentName:"li"},"JobStateEvent")," currently only supports the Zeta engine"),(0,l.yg)("li",{parentName:"ul"},"Event types and event classes are in a one-to-one correspondence; ensure type matching during conversion to avoid ",(0,l.yg)("inlineCode",{parentName:"li"},"ClassCastException")),(0,l.yg)("li",{parentName:"ul"},"You can implement multiple event handlers to process different types of events respectively, or handle multiple event types in a single handler")),(0,l.yg)("p",null,"Through the above steps, you can flexibly monitor and process various events in SeaTunnel, and implement custom business logic such as status monitoring, alert notifications, and data statistics."))}u.isMDXComponent=!0}}]);